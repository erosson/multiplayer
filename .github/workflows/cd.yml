name: Continuous Deployment

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn test:ci

  # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions
  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image - server
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          target: server
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: |
            ghcr.io/erosson/multiplayer/server:latest
            ghcr.io/erosson/multiplayer/server:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker image - www
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          target: www
          push: true
          tags: |
            ghcr.io/erosson/multiplayer/www:latest
            ghcr.io/erosson/multiplayer/www:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
      
  write-k8s:
    # this triggers a deploy via argocd
    runs-on: ubuntu-latest
    # permissions:
      # contents: write
    # needs: [build-and-push-image]
    steps:
      #- uses: actions/checkout@v3
      #  with:
      #    repository: erosson/kubernetes
      - run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/erosson/kubernetes/dispatches \
            -d '{"event_type":"image-update","client_payload":{"caller":"erosson/multiplayer"}}'
        #./patch-image.sh packages/erosson/multiplayer/server.yml ghcr.io/erosson/multiplayer/server ${{ github.sha }}
        #./patch-image.sh packages/erosson/multiplayer/www.yml ghcr.io/erosson/multiplayer/www ${{ github.sha }}
        #./push-image.sh erosson/multiplayer ${{ github.sha }}


      #- run: ./vendor/config-kube.sh
      #  env:
      #    KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      # deploy the new, changed docker image - the `:latest` tag. Restarting
      # with `imagePullPolicy: always` seems to work.
      #
      # kubernetes docs say not to use `:latest` in production, but I just want
      # kubernetes to match what's in git without changing the config files or
      # versioning every time. Maybe I don't fully understand kubernetes yet?
      #
      # moved to github.com/erosson/kubernetes
      #- run: |
      #    source ./vendor/bashrc
      #    kubectl diff -f k8s || true
      #    kubectl apply -f k8s
      #    kubectl rollout restart deployment/server
      #    kubectl rollout restart deployment/www
